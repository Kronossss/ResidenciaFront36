import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError } from 'rxjs/operators';

@Injectable({
  providedIn: 'root'
})
export class ShoppingListApiService {
  private apiUrl = 'http://localhost:3000/shopping-list';

  constructor(private http: HttpClient) {}

  // Método para obter a lista de itens
  getItems(): Observable<any> {
    return this.http.get(this.apiUrl).pipe(
      catchError(this.handleError)
    );
  }

  // Método para adicionar um novo item à lista
  addItem(item: any): Observable<any> {
    return this.http.post(this.apiUrl, item).pipe(
      catchError(this.handleError)
    );
  }

  // Método para excluir um item da lista por ID
  deleteItem(id: number): Observable<any> {
    return this.http.delete(`${this.apiUrl}/${id}`).pipe(
      catchError(this.handleError)
    );
  }

  // Método para atualizar o status de um item da lista (exemplo: marcar como "comprado")
  updateItem(id: number, updateData: any): Observable<any> {
    return this.http.patch(`${this.apiUrl}/${id}`, updateData).pipe(
      catchError(this.handleError)
    );
  }

  // Função para lidar com erros de requisição HTTP
  private handleError(error: HttpErrorResponse) {
    let errorMessage = 'Erro desconhecido';
    if (error.error instanceof ErrorEvent) {
      // Erro no lado do cliente
      errorMessage = `Erro: ${error.error.message}`;
    } else {
      // Erro no lado do servidor
      errorMessage = `Erro ${error.status}: ${error.message}`;
    }
    console.error(errorMessage); // Para log no console (opcional)
    return throwError(() => new Error('Ocorreu um problema ao processar sua solicitação. Por favor, tente novamente mais tarde.'));
  }
}
